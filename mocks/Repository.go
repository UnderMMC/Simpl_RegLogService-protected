// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	entity "secondTry/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetSessionID provides a mock function with given fields: session
func (_m *Repository) GetSessionID(session entity.Session) (int, error) {
	ret := _m.Called(session)

	if len(ret) == 0 {
		panic("no return value specified for GetSessionID")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.Session) (int, error)); ok {
		return rf(session)
	}
	if rf, ok := ret.Get(0).(func(entity.Session) int); ok {
		r0 = rf(session)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(entity.Session) error); ok {
		r1 = rf(session)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSessionUUID provides a mock function with given fields: session
func (_m *Repository) GetSessionUUID(session entity.Session) (string, error) {
	ret := _m.Called(session)

	if len(ret) == 0 {
		panic("no return value specified for GetSessionUUID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.Session) (string, error)); ok {
		return rf(session)
	}
	if rf, ok := ret.Get(0).(func(entity.Session) string); ok {
		r0 = rf(session)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(entity.Session) error); ok {
		r1 = rf(session)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserHashedPass provides a mock function with given fields: user
func (_m *Repository) GetUserHashedPass(user entity.User) (string, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for GetUserHashedPass")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.User) (string, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(entity.User) string); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(entity.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserID provides a mock function with given fields: user
func (_m *Repository) GetUserID(user entity.User) (int, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for GetUserID")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.User) (int, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(entity.User) int); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(entity.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionRegistration provides a mock function with given fields: session, user
func (_m *Repository) SessionRegistration(session entity.Session, user entity.User) (string, time.Time, error) {
	ret := _m.Called(session, user)

	if len(ret) == 0 {
		panic("no return value specified for SessionRegistration")
	}

	var r0 string
	var r1 time.Time
	var r2 error
	if rf, ok := ret.Get(0).(func(entity.Session, entity.User) (string, time.Time, error)); ok {
		return rf(session, user)
	}
	if rf, ok := ret.Get(0).(func(entity.Session, entity.User) string); ok {
		r0 = rf(session, user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(entity.Session, entity.User) time.Time); ok {
		r1 = rf(session, user)
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	if rf, ok := ret.Get(2).(func(entity.Session, entity.User) error); ok {
		r2 = rf(session, user)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UserRegistration provides a mock function with given fields: user
func (_m *Repository) UserRegistration(user entity.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for UserRegistration")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
